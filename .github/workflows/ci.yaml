name: CI
on:
  pull_request:
    branches:
      - main

env:
  DB_USER: ${{ secrets.DB_USER }}
  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
  DB_PORT: ${{ secrets.DB_PORT }}
  BRONZE_DB_HOST: ${{ secrets.BRONZE_DB_HOST }}
  BRONZE_DB: ${{ secrets.BRONZE_DB }}
  SILVER_DB_HOST: ${{ secrets.SILVER_DB_HOST }}
  SILVER_DB: ${{ secrets.SILVER_DB }}
  GOLD_DB_HOST: ${{ secrets.GOLD_DB_HOST }}
  GOLD_DB: ${{ secrets.GOLD_DB }}
  MLFLOW_DB_HOST: ${{ secrets.MLFLOW_DB_HOST }}
  MLFLOW_DB: ${{ secrets.MLFLOW_DB }}
  MLFLOW_TRACKING_URI: ${{ secrets.MLFLOW_TRACKING_URI }}
  TEST_DB_USER: ${{ secrets.TEST_DB_USER }}
  TEST_DB_PASSWORD: ${{ secrets.TEST_DB_PASSWORD }}
  TEST_DB_HOST: ${{ secrets.TEST_DB_HOST }}
  TEST_DB: ${{ secrets.TEST_DB }}
  TEST_DB_PORT: ${{ secrets.TEST_DB_PORT }}


jobs:
  lint:
    name: Lint with Ruff, Black, and MyPy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Setup environment variables
        run: |
          chmod +x app/scripts/setup_env.sh
          ./app/scripts/setup_env.sh

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pre-commit

      - name: Run pre-commit hooks with CI config (no auto-fix)
        run: pre-commit run --all-files --config .pre-commit-config-ci.yaml

  test:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Setup environment variables
        run: |
          chmod +x app/scripts/setup_env.sh
          ./app/scripts/setup_env.sh

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/dev.txt

      - name: Run tests and code coverage
        run: |
          pytest --cov=app --cov-report=xml --cov-report=html -q \
                 --ignore=app/tests/test_dags

      - name: Build custom Airflow image for testing
        run: |
          docker build -f Dockerfile.airflow -t test-airflow:latest .

      - name: Validate DAGs with official Airflow image
        run: |
          docker run --rm \
            -e AIRFLOW__CORE__LOAD_EXAMPLES=false \
            -e AIRFLOW__DATABASE__SQL_ALCHEMY_CONN="sqlite:////tmp/airflow.db" \
            -e PYTHONPATH=/opt/airflow/project/app \
            -v "${GITHUB_WORKSPACE}/app/dags:/opt/airflow/dags:ro" \
            -v "${GITHUB_WORKSPACE}:/opt/airflow/project:ro" \
            test-airflow:latest \
            bash -lc "
              set -e
              airflow db migrate && \
              airflow dags list || (airflow dags list-import-errors && exit 1) && \
              pytest -q /opt/airflow/project/app/tests/test_dags \
                --confcutdir=/opt/airflow/project/app/tests/test_dags \
                --override-ini='addopts='
            "
