name: CD - Scheduled Model Training

on:
  push:
    branches:
      # - deployment # Only use for testing
      - main
    paths:
      - 'app/services/**'
      - 'app/schemas/**'
      - 'requirements.txt'
  schedule:
    # Run every Sunday at 2 AM UTC (weekly retraining)
    - cron: '0 2 * * 0'
  workflow_dispatch: # Allow manual triggering
    inputs:
      training_reason:
        description: 'Reason for manual training'
        required: true
        default: 'Manual retrain request'
        type: string

env:
  DB_USER: ${{ secrets.DB_USER }}
  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
  DB_PORT: ${{ secrets.DB_PORT }}
  BRONZE_DB_HOST: ${{ secrets.BRONZE_DB_HOST }}
  BRONZE_DB: ${{ secrets.BRONZE_DB }}
  SILVER_DB_HOST: ${{ secrets.SILVER_DB_HOST }}
  SILVER_DB: ${{ secrets.SILVER_DB }}
  GOLD_DB_HOST: ${{ secrets.GOLD_DB_HOST }}
  GOLD_DB: ${{ secrets.GOLD_DB }}
  MLFLOW_DB_HOST: ${{ secrets.MLFLOW_DB_HOST }}
  MLFLOW_DB: ${{ secrets.MLFLOW_DB }}
  MLFLOW_TRACKING_URI: ${{ secrets.MLFLOW_TRACKING_URI }}
  TEST_DB_HOST: ${{ secrets.TEST_DB_HOST }}
  TEST_DB: ${{ secrets.TEST_DB }}

jobs:
  setup-infrastructure:
    name: Setup Training Infrastructure
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create environment file
        runs: |
          chmod +x app/scripts/setup_env.sh
          ./app/scripts/setup_env.sh

      - name: Start infrastructure services
        run: |
          echo "üöÄ Starting infrastructure services..."
          docker compose up -d --build

          # Wait for services to ready
          echo "‚è≥ Waiting for services to be ready..."
          sleep 30

          # Health check
          for service in bronze-db silver-db gold-db mlflow; do
            if docker compose ps $service | grep -q "running"; then
              echo "‚úÖ $service is running."
            else
              echo "‚ùå $service failed to start."
              docker compose logs $service
              exit 1
            fi
          done

  execute-training:
    name: Execute Model Training
    needs: setup-infrastructure
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create environment file
        runs: |
          chmod +x app/scripts/setup_env.sh
          ./app/scripts/setup_env.sh

      - name: Run training container
        id: training
        run: |
          echo "üöÄ Starting model training..."

          # Run training with timeout
          timeout 3600 docker compose --profile training run --rm training-container python services/trainer.py

          if [ $? -eq 0 ]; then
            echo "‚úÖ Training completed successfully."
          elif [ $? -eq 124 ]; then
            echo "‚ùå Training timed out after 1 hour."
            exit 1
          else
            echo "‚ùå Training failed."
            exit 1
          fi

      - name: Verify model artifacts
        run: |
          echo "üîç Verifying model artifacts..."

          # Check if MLflow has new model
          docker compose --profile training run --rm training-container python -c "
          import sys
          sys.path.append('.')
          from services.mflow_utils import MLflowArtifactLoader
          from services import MLFLOW_EXPERIMENT_NAME

          try:
            "
