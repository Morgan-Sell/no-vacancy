# Docker Compose file for the NoVacancy application
# docker-compose is used as an orchestrator. Dockerfile perform the behaviors.
services:
  # -----------------------------------------------
  # Data Infrastructure (Medallion Architecture)
  # -----------------------------------------------
  bronze-db:
    image: postgres:latest
    container_name: bronze-db
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${BRONZE_DB}
    ports:
      - "5433:5432"
    volumes:
      - bronze_data:/var/lib/postgresql/data
    # Airflow needs DB initialization before starting
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${BRONZE_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  silver-db:
    image: postgres:latest
    container_name: silver-db
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${SILVER_DB}
    ports:
      - "5434:5432"
    volumes:
      - silver_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${SILVER_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  gold-db:
    image: postgres:latest
    container_name: gold-db
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${GOLD_DB}
    ports:
      - "5435:5432"
    volumes:
      - gold_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${GOLD_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # -----------------------------------------------
  # ML Platform Infrastructure
  # -----------------------------------------------

  mlflow-db:
    image: postgres:latest
    container_name: mlflow-db
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${MLFLOW_DB}
    ports:
      - "5437:5432"
    volumes:
      - mlflow_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${MLFLOW_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

# MLflow Service (Always Available)
  mlflow:
    build:
      context: .
      dockerfile: Dockerfile.mlflow
    container_name: mlflow
    ports:
      - "5001:5000"
    depends_on:
      mlflow-db:
        condition: service_healthy
    env_file:
      - .env
    volumes:
      - ./mlruns:/mlflow/mlruns
    command: [
      "mlflow", "server",
      "--backend-store-uri", "postgresql://${DB_USER}:${DB_PASSWORD}@mlflow-db:5432/${MLFLOW_DB}",
      "--default-artifact-root", "/mlflow/mlruns",
      "--host", "0.0.0.0"
    ]

# -----------------------------------------------
# Orchestration Platform
# -----------------------------------------------
  airflow-db:
    image: postgres:14
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - airflow_db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U airflow -d airflow"]
      interval: 10s
      timeout: 5s
      retries: 5

  airflow-init:
    build:
      context: .
      dockerfile: Dockerfile.airflow
    container_name: airflow-init
    depends_on:
      airflow-db:
        condition: service_healthy
    environment:
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@airflow-db:5432/airflow
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__CORE__LOAD_EXAMPLES: "false"
    command: >
      bash -c "
        airflow db init &&
        airflow users create \
          --username homer \
          --firstname Homer \
          --lastname Simpson \
          --role Admin \
          --email homer@duff.com \
          --password waffles
      "
    profiles:
      - airflow

  airflow-webserver:
    build:
      context: .
      dockerfile: Dockerfile.airflow
    container_name: airflow-webserver
    depends_on:
      - airflow-init
      - bronze-db
      - silver-db
      - gold-db
      - mlflow
    environment:
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@airflow-db:5432/airflow
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__CORE__LOAD_EXAMPLES: "false"
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      MLFLOW_TRACKING_URI: ${MLFLOW_TRACKING_URI}
      # Database hosts for DAGs
      BRONZE_DB_HOST: bronze-db
      SILVER_DB_HOST: silver-db
      GOLD_DB_HOST: gold-db
    volumes:
      - ./app/dags:/opt/airflow/dags:ro
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "8080:8080"
    command: webserver
    profiles:
      - airflow
    restart: unless-stopped

  airflow-scheduler:
    build:
      context: .
      dockerfile: Dockerfile.airflow
    container_name: airflow-scheduler
    depends_on:
      - airflow-init
    environment:
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@airflow-db:5432/airflow
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__CORE__LOAD_EXAMPLES: "false"
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      MLFLOW_TRACKING_URI: ${MLFLOW_TRACKING_URI}
      # Database hosts for DAGs
      BRONZE_DB_HOST: bronze-db
      SILVER_DB_HOST: silver-db
      GOLD_DB_HOST: gold-db
    volumes:
      - ./app/dags:/opt/airflow/dags:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: scheduler
    profiles:
      - airflow
    restart: unless-stopped

# -------------------------------------
# ML Workloads
# -------------------------------------
  training-container:
    build:
      context: .
      dockerfile: Dockerfile.training
    container_name: novacancy-training
    profiles:
      - training
    depends_on:
      bronze-db:
        condition: service_healthy
      silver-db:
        condition: service_healthy
      gold-db:
        condition: service_healthy
      mlflow:
        condition: service_started
      test-db:
        condition: service_started
    env_file:
      - .env
    volumes:
      - ./data:/app/data:ro # Read-only mount
    environment:
      CONTAINER_TYPE: training
      DATA_DIR: /app/data
      # Database connection details
      DB_PORT: ${DB_PORT}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      # Database names
      BRONZE_DB: ${BRONZE_DB}
      SILVER_DB: ${SILVER_DB}
      GOLD_DB: ${GOLD_DB}
      MLFLOW_DB: ${MLFLOW_DB}
      # Host configurations
      BRONZE_DB_HOST: bronze-db
      SILVER_DB_HOST: silver-db
      GOLD_DB_HOST: gold-db
      MLFLOW_TRACKING_URI: http://mlflow:5000
      # Test database
      TEST_DB_HOST: test-db
      TEST_DB_PORT: ${TEST_DB_PORT}
      TEST_DB_USER: ${TEST_DB_USER}
      TEST_DB_PASSWORD: ${TEST_DB_PASSWORD}
      TEST_DB: ${TEST_DB}

  inference-container:
    build:
      context: .
      dockerfile: Dockerfile.inference
    container_name: novacancy-inference
    ports:
      - 8000:8000
    depends_on:
      gold-db:
        condition: service_healthy
      mlflow:
        condition: service_started
    env_file:
      - .env
    environment:
      BRONZE_DB_HOST: bronze-db
      SILVER_DB_HOST: silver-db
      GOLD_DB_HOST: gold-db
      MLFLOW_TRACKING_URI: http://mlflow:5000
    # Always running
    restart: unless-stopped

# -------------------------------------
# Development & Testing
# -------------------------------------

  # Test Database (Training Profile Only)
  test-db:
    image: postgres:latest
    container_name: test-db
    profiles:
      - training
      - testing
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${TEST_DB_USER}
      POSTGRES_PASSWORD: ${TEST_DB_PASSWORD}
      POSTGRES_DB: ${TEST_DB}
    ports:
      - "5436:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${TEST_DB_USER} -d ${TEST_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5


volumes:
  bronze_data:
  silver_data:
  gold_data:
  mlflow_data:
  airflow_db_data:
