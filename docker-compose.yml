# Docker Compose file for the NoVacancy application
# docker-compose is used as an orchestrator. Dockerfile perform the behaviors.
services:
  # Database Services (Always Available)
  bronze-db:
    image: postgres:latest
    container_name: bronze-db
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${BRONZE_DB}
    ports:
      - "5433:5432"
    volumes:
      - bronze_data:/var/lib/postgresql/data

  silver-db:
    image: postgres:latest
    container_name: silver-db
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${SILVER_DB}
    ports:
      - "5434:5432"
    volumes:
      - silver_data:/var/lib/postgresql/data

  gold-db:
    image: postgres:latest
    container_name: gold-db
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${GOLD_DB}
    ports:
      - "5435:5432"
    volumes:
      - gold_data:/var/lib/postgresql/data


  mlflow-db:
    image: postgres:latest
    container_name: mlflow-db
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${MLFLOW_DB}
    ports:
      - "5437:5432"
    volumes:
      - mlflow_data:/var/lib/postgresql/data


# MLflow Service (Always Available)
  mlflow:
    build:
      context: .
      dockerfile: Dockerfile.mlflow
    container_name: mlflow
    ports:
      - "5001:5000"
    depends_on:
      - mlflow-db
    env_file:
      - .env
    volumes:
      - ./mlruns:/mlflow/mlruns
    command: [
      "mlflow", "server",
      "--backend-store-uri", "postgresql://${DB_USER}:${DB_PASSWORD}@mlflow-db:5432/${MLFLOW_DB}",
      "--default-artifact-root", "/mlflow/mlruns",
      "--host", "0.0.0.0"
    ]

  # Test Database (Training Profile Only)
  test-db:
    image: postgres:latest
    container_name: test-db
    profiles:
      - training
      - testing
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${TEST_DB_USER}
      POSTGRES_PASSWORD: ${TEST_DB_PASSWORD}
      POSTGRES_DB: ${TEST_DB}
    ports:
      - "5436:5432"
    # volumes as test data should not persist


  # Training Container (Training Profile Only)
  training-container:
    build:
      context: .
      dockerfile: Dockerfile.training
    container_name: novacancy-training
    profiles:
      - training
    depends_on:
      - bronze-db
      - silver-db
      - gold-db
      - mlflow-db
      - mlflow
      - test-db
    env_file:
      - .env
    volumes:
      - ./data:/app/data # TODO: Confirm if needed given that script imports data into Bronze DB
    environment:
      CONTAINER_TYPE: training
      DATA_DIR: ./data
      # Database connection details
      DB_PORT: ${DB_PORT}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      # Database names
      BRONZE_DB: ${BRONZE_DB}
      SILVER_DB: ${SILVER_DB}
      GOLD_DB: ${GOLD_DB}
      MLFLOW_DB: ${MLFLOW_DB}
      # Host configurations
      BRONZE_DB_HOST: bronze-db
      SILVER_DB_HOST: silver-db
      GOLD_DB_HOST: gold-db
      MLFLOW_TRACKING_URI: http://mlflow:5000
      # Test database
      TEST_DB_HOST: test-db
      TEST_DB_PORT: ${TEST_DB_PORT}
      TEST_DB_USER: ${TEST_DB_USER}
      TEST_DB_PASSWORD: ${TEST_DB_PASSWORD}
      TEST_DB: ${TEST_DB}

  training-test:
    image: python:3.12-slim
    container_name: training-test
    command: echo "Training test works"
    profiles:
      - training


  inference-container:
    build:
      context: .
      dockerfile: Dockerfile.inference
    container_name: novacancy-inference
    ports:
      - 8000:8000
    depends_on:
      - bronze-db
      - silver-db
      - gold-db
      - mlflow-db
      - mlflow
    env_file:
      - .env
    environment:
      BRONZE_DB_HOST: bronze-db
      SILVER_DB_HOST: silver-db
      GOLD_DB_HOST: gold-db
      MLFLOW_TRACKING_URI: http://mlflow:5000
    # Always running
    restart: unless-stopped

  airflow:
    image: apache/airflow:2.8.1-python3.11
    container_name: airflow
    depends_on:
      - bronze-db
      - silver-db
      - gold-db
      - mlflow
    env_file:
      - .env
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: sqlite:////opt/airflow/airflow.db
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: "false"
      AIRFLOW__CORE__LOAD_EXAMPLES: "false"
      PYTHONPATH: "/opt/airflow/app"
      BRONZE_DB_PATH: bronze-db
      SILVER_DB_HOST: silver-db
      GOLD_DB_HOST: gold-db
      MLFLOW_TRACKING_URI: http://mlflow:5000
    ports:
      - "8080:8080"
    volumes:
      - ./app:/opt/airflow/app
      - ./app/airflow/dags:/opt/airflow/dags
      - ./data:/opt/airflow/data
      - airflow_data:/opt/airflow
    command: >
      bash -c "
        pip install -r /opt/airflow/app/ ../requirements.txt &&
        airflow db init &&
        airflow users create \
          --username admin \
          --password \
          --firstname Admin \
          --lastname User \
          --role Admin \
          --email admin@example.com || true &&
        airflow webserver --port 8080 &
        airflow scheduler
      "
    profiles:
      - airflow
      - training

volumes:
  bronze_data:
  silver_data:
  gold_data:
  mlflow_data:
  airflow_data:
